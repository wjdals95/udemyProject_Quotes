{"version":3,"file":"static/js/857.b8f3bdc0.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport CommentsList from \"./CommentsList\";\n\nimport classes from \"./Comments.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  },[sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.lenth === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { Fragment, useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n// const DUMMY_QUOTES = [\n//   {\n//     id: \"q1\",\n//     author: \"JM\",\n//     text: \"Learning React is fun!\",\n//   },\n//   {\n//     id: \"q2\",\n//     author: \"CJM\",\n//     text: \"Learning React is great!\",\n//   },\n// ];\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  //주소가 바뀔시 다른 라우터들도 일일이 변경할 필요없이 동적으로 사용하기 위해 사용.\n  const params = useParams();\n\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  //const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if(status === 'error'){\n    return <div className=\"centered\">{error}</div>\n  }\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","lenth","onClick","author","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}